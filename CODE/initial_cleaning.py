# -*- coding: utf-8 -*-
"""6242 GROUP PROJECT

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1FprSxn2pctGURyEUmvoN0Ad-wyzhc2r6
"""

from google.colab import drive
drive.mount("/content/gdrive")

pip install -U sentence-transformers

import numpy as np
import pandas as pd
from sentence_transformers import SentenceTransformer
df_kaggle = pd.read_csv("/content/gdrive/My Drive/amazon_reviews_kaggle.txt",sep="\t")

df_kaggle

df_kaggle_text = df_kaggle[['RATING','VERIFIED_PURCHASE','PRODUCT_CATEGORY','REVIEW_TITLE', 'REVIEW_TEXT','LABEL']].copy()

df_kaggle_text['TEXT'] = df_kaggle_text.apply(lambda x: x['REVIEW_TITLE'] + ". " + x['REVIEW_TEXT'], axis=1)

df_kaggle_text.drop(['REVIEW_TITLE','REVIEW_TEXT'], axis=1, inplace=True)

df_kaggle_text = df_kaggle_text[['RATING','VERIFIED_PURCHASE','PRODUCT_CATEGORY','TEXT','LABEL']]

def parse_label(label):
    if label == '__label2__':
        return 'real'
    else:
        return 'fake' 

df_kaggle_text['LABEL'] = df_kaggle_text['LABEL'].apply(lambda x: parse_label(x))

df_kaggle_text

def concatenate_categorical_values_in_text(row):
  rating = row['RATING']
  verified = row['VERIFIED_PURCHASE']
  category = row['PRODUCT_CATEGORY']
  verified_string = ""
  text = row['TEXT']

  new_string = "The rating is {}. ".format(rating)
  if (verified == "Y"):
    new_string += "It is a verified purchase with product category {}. ".format(category)
  else:
    new_string += "It is not a verified purchase with product category {}. ".format(category)
  new_string += text

  return new_string

df_kaggle_mod = df_kaggle_text.copy()
df_kaggle_mod["TEXT"] = df_kaggle_mod.apply(lambda x: concatenate_categorical_values_in_text(x), axis=1)

df_kaggle_mod.drop(["RATING","VERIFIED_PURCHASE","PRODUCT_CATEGORY"], axis=1, inplace = True)

df_kaggle_mod

sentence_transformer_model = SentenceTransformer('sentence-transformers/paraphrase-xlm-r-multilingual-v1')

def get_paragraph_embeddings(row):
  embedding = sentence_transformer_model.encode(row["TEXT"])
  return embedding

df_kaggle_mod["EMBEDDINGS"] = df_kaggle_mod.apply(lambda x: get_paragraph_embeddings(x), axis=1)

df_kaggle['PRODUCT_CATEGORY'].unique()